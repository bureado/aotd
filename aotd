#!/usr/bin/python

#
# aotd - motd powered by Azure Advisor
#   (C) 2017 Jose Miguel Parrella Romero <j@bureado.com>
#
# Released under the terms of the Apache License, 2.0
#

import sys
import json
import re
import hashlib
import requests

imdsUri = "http://169.254.169.254/metadata/instance?api-version=2017-04-02"
highImpactOnly = False

msgs = []
problems = {}

r = requests.get(imdsUri, headers={"Metadata": "True"})
# TODO: Implement a catch for IMDS unavailability
metaJson = json.loads(r.text)
vmName = metaJson["compute"]["name"]
vmLocation = metaJson["compute"]["location"]

msgs.append("This is %(Name)s in %(Location)s. Here's a couple friendly reminders:\n" % { "Name": vmName, "Location": vmLocation })

recos = json.loads(sys.stdin.read())
# TODO: Implement a catch for invalid JSON input

for reco in recos:
  if re.search("virtualMachines", reco['impactedField']) and re.search(vmName, reco['impactedValue']):
    if highImpactOnly and not re.match("High", reco["impact"]):
      continue
    problem = reco["shortDescription"]["problem"]
    if not hashlib.md5(problem).hexdigest() in problems:
      msg = "* [%(Category)s/%(Impact)s]: %(Problem)s" % {
        "Impact": reco["impact"],
        "Category": reco["category"],
        "Problem": problem,
        "Solution": reco["shortDescription"]["solution"]}
      msgs.append(msg)
      problems[hashlib.md5(problem).hexdigest()] = True

for msg in msgs:
  print msg
